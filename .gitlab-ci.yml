# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
#  - test
  - package
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: gradle:8.4.0-jdk17
  script:
    - echo "Compiling the code..."
    - chmod +x ./gradlew
    - ./gradlew clean
    - ./gradlew build
    - echo "Compile complete."
  artifacts:
    paths: 
        - build/libs/*.jar
    expire_in: 30 days

#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  image: gradle:8.4.0-jdk17
#  script:
#    - chmod +x ./gradlew
#    - ./gradlew clean
#    - ./gradlew test
package:
  stage: package
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u heavyflood -p **0118ghdtn!!
  script:
    - mv ./build/libs/demo-0.0.1-SNAPSHOT.jar ./junit-test.jar
    - docker image build -t junit-test --no-cache .
    - docker image tag junit-test heavyflood/junit-test
    - docker image push heavyflood/junit-test   # Container Registry에 image push
  # script가 실행된 후 수행 될 script
  after_script:
    - docker run --name=app -d -p 8081:8081 heavyflood/junit-test .
  #  - docker logout   # GitLab Container Registry 로그아웃
  # JOB이 수행될 branch 설정 (설정된 branch에 push가 발생될 시 JOB 수행)
  only:
    - master    
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
